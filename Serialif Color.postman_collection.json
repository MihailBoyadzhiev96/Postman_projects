{
	"info": {
		"_postman_id": "df1c5e61-c170-4ce4-99dc-150731949af3",
		"name": "Serialif Color",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37066892"
	},
	"item": [
		{
			"name": "Get colors in different formats Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body as JSON\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Helper function to validate color components\r",
							"function validateColorComponents(color, expected) {\r",
							"    pm.expect(color.hex.value).to.eql(expected.hex.value);\r",
							"    pm.expect(color.hex.composition.red).to.eql(expected.hex.red);\r",
							"    pm.expect(color.hex.composition.green).to.eql(expected.hex.green);\r",
							"    pm.expect(color.hex.composition.blue).to.eql(expected.hex.blue);\r",
							"    pm.expect(color.rgb.value).to.eql(expected.rgb.value);\r",
							"    pm.expect(color.rgb.composition.red).to.eql(expected.rgb.red);\r",
							"    pm.expect(color.rgb.composition.green).to.eql(expected.rgb.green);\r",
							"    pm.expect(color.rgb.composition.blue).to.eql(expected.rgb.blue);\r",
							"    pm.expect(color.hsl.value).to.eql(expected.hsl.value);\r",
							"    pm.expect(color.hsl.composition.hue).to.eql(expected.hsl.hue);\r",
							"    pm.expect(color.hsl.composition.saturation).to.eql(expected.hsl.saturation);\r",
							"    pm.expect(color.hsl.composition.lightness).to.eql(expected.hsl.lightness);\r",
							"    pm.expect(color.hsl_raw.value).to.eql(expected.hsl_raw.value);\r",
							"    pm.expect(color.hsl_raw.composition.hue).to.eql(expected.hsl_raw.hue);\r",
							"    pm.expect(color.hsl_raw.composition.saturation).to.eql(expected.hsl_raw.saturation);\r",
							"    pm.expect(color.hsl_raw.composition.lightness).to.eql(expected.hsl_raw.lightness);\r",
							"}\r",
							"\r",
							"// Expected values\r",
							"const expectedColors = {\r",
							"    base: {\r",
							"        keyword: \"aquamarine\",\r",
							"        hex: { value: \"#7fffd4\", red: \"7f\", green: \"ff\", blue: \"d4\" },\r",
							"        rgb: { value: \"rgb(127, 255, 212)\", red: 127, green: 255, blue: 212 },\r",
							"        hsl: { value: \"hsl(160, 100%, 75%)\", hue: 160, saturation: 100, lightness: 75 },\r",
							"        hsl_raw: { value: \"hsl(159.84375, 100%, 74.90196%)\", hue: 159.84375, saturation: 100, lightness: 74.90196 }\r",
							"    },\r",
							"    complementary: {\r",
							"        hex: { value: \"#80002b\", red: \"80\", green: \"00\", blue: \"2b\" },\r",
							"        rgb: { value: \"rgb(128, 0, 43)\", red: 128, green: 0, blue: 43 },\r",
							"        hsl: { value: \"hsl(340, 100%, 25%)\", hue: 340, saturation: 100, lightness: 25 },\r",
							"        hsl_raw: { value: \"hsl(339.84375, 100%, 25.09804%)\", hue: 339.84375, saturation: 100, lightness: 25.09804 }\r",
							"    },\r",
							"    \r",
							"    black: {\r",
							"        keyword: \"black\",\r",
							"        hex: { value: \"#000000\", red: \"00\", green: \"00\", blue: \"00\" },\r",
							"        rgb: { value: \"rgb(0, 0, 0)\", red: 0, green: 0, blue: 0 },\r",
							"        hsl: { value: \"hsl(0, 0%, 0%)\", hue: 0, saturation: 0, lightness: 0 },\r",
							"        hsl_raw: { value: \"hsl(0, 0%, 0%)\", hue: 0, saturation: 0, lightness: 0 }\r",
							"    },\r",
							"    white: {\r",
							"        keyword: \"white\",\r",
							"        hex: { value: \"#ffffff\", red: \"ff\", green: \"ff\", blue: \"ff\" },\r",
							"        rgb: { value: \"rgb(255, 255, 255)\", red: 255, green: 255, blue: 255 },\r",
							"        hsl: { value: \"hsl(0, 0%, 100%)\", hue: 0, saturation: 0, lightness: 100 },\r",
							"        hsl_raw: { value: \"hsl(0, 0%, 100%)\", hue: 0, saturation: 0, lightness: 100 }\r",
							"    },\r",
							"    grayscale: {\r",
							"        hex: { value: \"#bfbfbf\", red: \"bf\", green: \"bf\", blue: \"bf\" },\r",
							"        rgb: { value: \"rgb(191, 191, 191)\", red: 191, green: 191, blue: 191 },\r",
							"        hsl: { value: \"hsl(160, 0%, 75%)\", hue: 160, saturation: 0, lightness: 75 },\r",
							"        hsl_raw: { value: \"hsl(159.84375, 0%, 74.90196%)\", hue: 159.84375, saturation: 0, lightness: 74.90196 }\r",
							"    }\r",
							"};\r",
							"\r",
							"// Validate base colors\r",
							"pm.test(\"Validate base colors\", function () {\r",
							"    pm.expect(responseJson.base.keyword).to.eql(expectedColors.base.keyword);\r",
							"    validateColorComponents(responseJson.base, expectedColors.base);\r",
							"});\r",
							"\r",
							"// Validate base_without_alpha colors\r",
							"pm.test(\"Validate base without alpha colors\", function () {\r",
							"    pm.expect(responseJson.base_without_alpha.keyword).to.eql(expectedColors.base.keyword);\r",
							"    validateColorComponents(responseJson.base_without_alpha, expectedColors.base);\r",
							"});\r",
							"\r",
							"// Validate base_without_alpha_contrasted_text colors\r",
							"pm.test(\"Validate base without alpha contrasted text colors\", function () {\r",
							"    pm.expect(responseJson.base_without_alpha_contrasted_text.keyword).to.eql(expectedColors.black.keyword);\r",
							"    validateColorComponents(responseJson.base_without_alpha_contrasted_text, expectedColors.black);\r",
							"});\r",
							"\r",
							"// Validate complementary colors\r",
							"pm.test(\"Validate complementary colors\", function () {\r",
							"    validateColorComponents(responseJson.complementary, expectedColors.complementary);\r",
							"});\r",
							"\r",
							"// Validate complementary_without_alpha colors\r",
							"pm.test(\"Validate complementary without alpha colors\", function () {\r",
							"    validateColorComponents(responseJson.complementary_without_alpha, expectedColors.complementary);\r",
							"});\r",
							"\r",
							"// Validate complementary_without_alpha_contrasted_text colors\r",
							"pm.test(\"Validate complementary without alpha contrasted text colors\", function () {\r",
							"    pm.expect(responseJson.complementary_without_alpha_contrasted_text.keyword).to.eql(expectedColors.white.keyword);\r",
							"    validateColorComponents(responseJson.complementary_without_alpha_contrasted_text, expectedColors.white);\r",
							"});\r",
							"\r",
							"// Validate grayscale colors\r",
							"pm.test(\"Validate grayscale colors\", function () {\r",
							"    validateColorComponents(responseJson.grayscale, expectedColors.grayscale);\r",
							"});\r",
							"\r",
							"// Validate grayscale_without_alpha colors\r",
							"pm.test(\"Validate grayscale without alpha colors\", function () {\r",
							"    validateColorComponents(responseJson.grayscale_without_alpha, expectedColors.grayscale);\r",
							"});\r",
							"\r",
							"// Validate grayscale_without_alpha_contrasted_text colors\r",
							"pm.test(\"Validate grayscale without alpha contrasted text colors\", function () {\r",
							"    pm.expect(responseJson.grayscale_without_alpha_contrasted_text.keyword).to.eql(expectedColors.black.keyword);\r",
							"    validateColorComponents(responseJson.grayscale_without_alpha_contrasted_text, expectedColors.black);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://color.serialif.com/aquamarine",
					"protocol": "https",
					"host": [
						"color",
						"serialif",
						"com"
					],
					"path": [
						"aquamarine"
					]
				}
			},
			"response": []
		}
	]
}