{
	"info": {
		"_postman_id": "2718e98d-a538-4516-8de6-d2fd8892af67",
		"name": "openSenseMap",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37066892"
	},
	"item": [
		{
			"name": "Personal senseBox (weather station) data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify the API is returning the Correct Status\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is correct\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"    pm.expect(pm.response.responseSize).to.below(7500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify body items\", function() {\r",
							"    ['_id', 'createdAt', 'exposure', 'name', 'sensors', 'updatedAt', 'description', 'image', 'model', 'currentLocation', 'lastMeasurementAt', 'grouptag', 'loc',].forEach(property => {\r",
							"        pm.expect(response).to.have.property(property);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Verify body\", function() {\r",
							"    // const body = response.body;\r",
							"    const expectedValues = {\r",
							"        \"_id\": \"57000b8745fd40c8196ad04c\",\r",
							"        \"createdAt\": \"2022-03-30T11:25:43.219Z\",\r",
							"        \"exposure\": \"outdoor\",\r",
							"        \"name\": \"Oststr/Mauritzsteinpfad\",\r",
							"    };\r",
							"\r",
							"    Object.keys(expectedValues).forEach(key => {\r",
							"        pm.expect(response).to.have.property(key);\r",
							"        pm.expect(response[key]).to.eql(expectedValues[key]);\r",
							"        pm.expect(response[key]).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"const expectedValues = [\r",
							"    {\r",
							"        _id: \"57000b8745fd40c8196ad04e\",\r",
							"        lastMeasurement: null,\r",
							"        sensorType: \"VEML6070\",\r",
							"        title: \"UV-Intensität\",\r",
							"        unit: \"μW/cm²\"\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"57000b8745fd40c8196ad04f\",\r",
							"        lastMeasurement: null,\r",
							"        sensorType: \"TSL45315\",\r",
							"        title: \"Beleuchtungsstärke\",\r",
							"        unit: \"lx\"\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"57000b8745fd40c8196ad050\",\r",
							"        lastMeasurement: null,\r",
							"        sensorType: \"BMP280\",\r",
							"        title: \"Luftdruck\",\r",
							"        unit: \"hPa\"\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"57000b8745fd40c8196ad051\",\r",
							"        lastMeasurement: null,\r",
							"        sensorType: \"HDC1008\",\r",
							"        title: \"rel. Luftfeuchte\",\r",
							"        unit: \"%\"\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"57000b8745fd40c8196ad052\",\r",
							"        lastMeasurement: null,\r",
							"        sensorType: \"HDC1008\",\r",
							"        title: \"Temperatur\",\r",
							"        unit: \"°C\"\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"58f0bdd0ba279000119b9c97\",\r",
							"        icon: \"osem-temperature-celsius\",\r",
							"        sensorType: \"Eltako FAFT60\",\r",
							"        unit: \"°C\",\r",
							"        title: \"Temperatur Terrasse\",\r",
							"        lastMeasurement: null\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"58f0bdd0ba279000119b9c98\",\r",
							"        icon: \"osem-humidity\",\r",
							"        sensorType: \"Eltako FAFT60\",\r",
							"        unit: \"%\",\r",
							"        title: \"rel. Luftfeuchte Terrasse\",\r",
							"        lastMeasurement: null\r",
							"    },\r",
							"\r",
							"    {\r",
							"        _id: \"58f0cea0ba279000119c497e\",\r",
							"        icon: \"osem-battery\",\r",
							"        sensorType: \"Eltako FAFT60\",\r",
							"        unit: \"V\",\r",
							"        title: \"Akkuspannung Terrasse\",\r",
							"        lastMeasurement: null\r",
							"    }\r",
							"];\r",
							"\r",
							"const verifySensorItem = (item, index) => {\r",
							"        pm.expect(item._id).to.be.a('string').and.eql(expectedValues[index]._id);\r",
							"        pm.expect(item.lastMeasurement).to.be.null;\r",
							"        pm.expect(item.sensorType).to.eql(expectedValues[index].sensorType);\r",
							"        pm.expect(item.title).to.eql(expectedValues[index].title);\r",
							"        pm.expect(item.unit).to.eql(expectedValues[index].unit);\r",
							"        pm.expect(item.title).to.eql(expectedValues[index].title);\r",
							"};\r",
							"\r",
							"pm.test(\"Verify sensor items\", function() {\r",
							"        pm.expect(response).to.have.property('sensors').that.is.an('array');\r",
							"    response.sensors.forEach((sensor, index) => {\r",
							"        verifySensorItem(sensor, index);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Verify sensor items\", function () {\r",
							"    pm.expect(response.updatedAt).to.be.a(\"string\").and.eql(\"2022-03-30T11:25:43.219Z\");\r",
							"    pm.expect(response.description).to.be.a(\"string\").and.eql(\"Experimenteller Aufbau mit ESP8266, Solarzelle und Akku. Es werden die handelsüblichen senseBox Sensoren verwendet.\\nDas Gerät ist nach Südosten ausgerichtet wird jedoch im Sommer von Bäumen abgeschattet.\")\r",
							"    pm.expect(response.image).to.be.a(\"string\").and.eql(\"57000b8745fd40c8196ad04c.jpg?1490540483609\");\r",
							"    pm.expect(response.model).to.be.a(\"string\").and.eql(\"custom\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify currentLocation items\",function () {\r",
							"    const currentLocation = response.currentLocation;\r",
							"    // const expectedNumbers = [\r",
							"    //     7.64568,\r",
							"    //     51.962372\r",
							"    // ];\r",
							"\r",
							"    pm.expect(currentLocation.coordinates).to.be.an(\"array\");\r",
							"    pm.expect(currentLocation.type).to.be.a(\"string\").and.eql(\"Point\");\r",
							"    pm.expect(currentLocation.timestamp).to.be.a(\"string\").and.eql(\"2016-04-02T18:12:23.000Z\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.opensensemap.org/boxes/57000b8745fd40c8196ad04c?format=json",
					"protocol": "https",
					"host": [
						"api",
						"opensensemap",
						"org"
					],
					"path": [
						"boxes",
						"57000b8745fd40c8196ad04c"
					],
					"query": [
						{
							"key": "format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		}
	]
}